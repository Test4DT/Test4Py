{"pymonet.box": {"Box.__init__": {"value": {"value": "T", "is_user_defined": false}}, "Box.__eq__": {"other": {"value": "object", "is_user_defined": false}}, "Box.__str__": {}, "Box.map": {"mapper": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Box.bind": {"mapper": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Box.ap": {}, "Box.to_maybe": {}, "Box.to_either": {}, "Box.to_lazy": {}, "Box.to_try": {}, "Box.to_validation": {}}, "pymonet.either": {"Either.__init__": {"value": {"value": "T", "is_user_defined": false}}, "Either.__eq__": {"other": {"value": "object", "is_user_defined": false}}, "Either.case": {"error": {"value": "Callable[[T], U]", "is_user_defined": false}, "success": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Either.ap": {}, "Either.to_box": {}, "Either.to_try": {}, "Either.to_lazy": {}, "Either.is_right": {}, "Left.map": {"_": {"value": "Callable[[Any], Any]", "is_user_defined": false}}, "Left.bind": {}, "Left.ap": {}, "Left.is_left": {}, "Left.is_right": {}, "Left.to_maybe": {}, "Left.to_validation": {}, "Right.map": {"mapper": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Right.bind": {"mapper": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Right.is_right": {}, "Right.is_left": {}, "Right.to_maybe": {}, "Right.to_validation": {}}, "pymonet.immutable_list": {"ImmutableList.__init__": {"head": {"value": "T", "is_user_defined": false}, "tail": {"value": "'ImmutableList[T]'", "is_user_defined": false}, "is_empty": {"value": "bool", "is_user_defined": false}}, "ImmutableList.__eq__": {"other": {"value": "object", "is_user_defined": false}}, "ImmutableList.__str__": {}, "ImmutableList.__add__": {"other": {"value": "'ImmutableList[T]'", "is_user_defined": false}}, "ImmutableList.__len__": {}, "ImmutableList.of": {"head": {"value": "T", "is_user_defined": false}}, "ImmutableList.empty": {}, "ImmutableList.to_list": {}, "ImmutableList.append": {"new_element": {"value": "T", "is_user_defined": false}}, "ImmutableList.unshift": {"new_element": {"value": "T", "is_user_defined": false}}, "ImmutableList.map": {"fn": {"value": "Callable[[Optional[T]], U]", "is_user_defined": false}}, "ImmutableList.filter": {"fn": {"value": "Callable[[Optional[T]], bool]", "is_user_defined": false}}, "ImmutableList.find": {"fn": {"value": "Callable[[Optional[T]], bool]", "is_user_defined": false}}, "ImmutableList.reduce": {"fn": {"value": "Callable[[U, T], U]", "is_user_defined": false}, "acc": {"value": "U", "is_user_defined": false}}}, "pymonet.lazy": {"Lazy.__init__": {"constructor_fn": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Lazy.__str__": {}, "Lazy.__eq__": {"other": {"value": "object", "is_user_defined": false}}, "Lazy.of": {"value": {"value": "U", "is_user_defined": false}}, "Lazy._compute_value": {}, "Lazy.map": {"mapper": {"value": "Callable[[U], W]", "is_user_defined": false}}, "Lazy.ap": {}, "Lazy.bind": {"fn": {"value": "'Callable[[U], Lazy[U, W]]'", "is_user_defined": false}}, "Lazy.get": {}, "Lazy.to_box": {}, "Lazy.to_either": {}, "Lazy.to_maybe": {}, "Lazy.to_try": {}, "Lazy.to_validation": {}}, "pymonet.maybe": {"Maybe.__init__": {"value": {"value": "T", "is_user_defined": false}, "is_nothing": {"value": "bool", "is_user_defined": false}}, "Maybe.__eq__": {"other": {"value": "object", "is_user_defined": false}}, "Maybe.just": {"value": {"value": "T", "is_user_defined": false}}, "Maybe.nothing": {}, "Maybe.map": {"mapper": {"value": "Callable[[T], U]", "is_user_defined": false}}, "Maybe.bind": {"mapper": {"value": "Callable[[T], 'Maybe[U]']", "is_user_defined": false}}, "Maybe.ap": {}, "Maybe.filter": {"filterer": {"value": "Callable[[T], bool]", "is_user_defined": false}}, "Maybe.get_or_else": {"default_value": {"value": "U", "is_user_defined": false}}, "Maybe.to_either": {}, "Maybe.to_box": {}, "Maybe.to_lazy": {}, "Maybe.to_try": {}, "Maybe.to_validation": {}}, "pymonet.monad_try": {"Try.__init__": {"is_success": {"value": "bool", "is_user_defined": false}}, "Try.__eq__": {}, "Try.__str__": {}, "Try.of": {"fn": {"value": "Callable", "is_user_defined": false}}, "Try.map": {}, "Try.bind": {}, "Try.on_success": {}, "Try.on_fail": {}, "Try.filter": {}, "Try.get": {}, "Try.get_or_else": {}}, "pymonet.semigroups": {"Semigroup.__init__": {}, "Semigroup.__eq__": {}, "Semigroup.fold": {}, "Semigroup.neutral": {}, "Sum.__str__": {}, "Sum.concat": {"semigroup": {"value": "'Sum'", "is_user_defined": false}}, "All.__str__": {}, "All.concat": {"semigroup": {"value": "'All'", "is_user_defined": false}}, "One.__str__": {}, "One.concat": {}, "First.__str__": {}, "First.concat": {}, "Last.__str__": {}, "Last.concat": {}, "Map.__str__": {}, "Map.concat": {}, "Max.__str__": {}, "Max.concat": {}, "Min.__str__": {}, "Min.concat": {}}, "pymonet.task": {"Task.__init__": {}, "Task.of": {}, "Task.reject": {}, "Task.map": {}, "Task.bind": {}}, "pymonet.utils": {"curry": {}, "identity": {"value": {"value": "T", "is_user_defined": false}}, "increase": {"value": {"value": "int", "is_user_defined": false}}, "eq": {}, "curried_map": {}, "curried_filter": {}, "find": {"collection": {"value": "List[T]", "is_user_defined": false}, "key": {"value": "Callable[[T], bool]", "is_user_defined": false}}, "compose": {}, "pipe": {}, "cond": {"condition_list": {"value": "List[Tuple[Callable[[T], bool], Callable]]", "is_user_defined": false}}, "memoize": {"fn": {"value": "Callable", "is_user_defined": false}}, "curry.fn": {}, "cond.result": {}, "memoize.memoized_fn": {}}, "pymonet.validation": {"Validation.__init__": {}, "Validation.__eq__": {}, "Validation.__str__": {}, "Validation.success": {}, "Validation.fail": {}, "Validation.is_success": {}, "Validation.is_fail": {}, "Validation.map": {}, "Validation.bind": {}, "Validation.ap": {}, "Validation.to_either": {}, "Validation.to_maybe": {}, "Validation.to_box": {}, "Validation.to_lazy": {}, "Validation.to_try": {}}, "pymonet": {}}