{"time": 1749.247814655304, "times": {"collect_message": 1429.7052655220032, "run": 319.5311210155487}, "result": {"pymonet.box": {"Box.__init__": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Box.__eq__": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}, "other": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "float", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.__str__": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.map": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box[A]"}, "mapper": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[Any], Any]", "hityper": "any", "type4py": "List[dict]", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Box.bind": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}, "mapper": {"test4dt": "Function(A) -> B", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[Any], Any]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Box.ap": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}, "applicative": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "str", "test4dt_se": "Box", "test4dt_be": "Box[B]"}}, "Box.to_maybe": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.to_either": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.to_lazy": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.to_try": {"self": {"test4dt": "Box", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}, "Box.to_validation": {"self": {"test4dt": "Box[Any]", "llm-with-summary": "Box", "llm-only": "Box", "hityper": "any", "type4py": "any", "test4dt_se": "Box", "test4dt_be": "Box"}}}, "pymonet.either": {"Either.__init__": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either"}, "value": {"test4dt": "Any", "llm-with-summary": "typing.Any", "llm-only": "Union[A, B]", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Either.__eq__": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either"}, "other": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "Iterable[T]", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Either.case": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Union[Left, Right]", "test4dt_be": "Either"}, "error": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}, "success": {"test4dt": "Function[A, B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Either.ap": {"self": {"test4dt": "Either[B]", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either[Callable[[B], A]]"}, "applicative": {"test4dt": "Either", "llm-with-summary": "Either[B]", "llm-only": "Either[B]", "hityper": "any", "type4py": "str", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Either.to_box": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Union[A, B]", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Either.to_try": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Either.to_lazy": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Either.is_right": {"self": {"test4dt": "Either", "llm-with-summary": "Either", "llm-only": "Either", "hityper": "any", "type4py": "any", "test4dt_se": "Union[Left, Right]", "test4dt_be": "Either"}}, "Left.map": {"self": {"test4dt": "Left", "llm-with-summary": "Left[A]", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left[A]", "test4dt_be": "Left[A]"}, "_": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[Any], Any]", "llm-only": "Any", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[Any], Any]", "test4dt_be": "typing.Callable[..., Any]"}}, "Left.bind": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left", "test4dt_be": "Left"}, "_": {"test4dt": "typing.Callable[[Any], Any]", "llm-with-summary": "Any", "llm-only": "Callable[[Any], Any]", "hityper": "any", "type4py": "str", "test4dt_se": "Callable[[A], Either[B, C]]", "test4dt_be": "Callable[[Any], Any]"}}, "Left.ap": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Either", "test4dt_be": "Left"}, "monad": {"test4dt": "Union[Left, Right]", "llm-with-summary": "Any", "llm-only": "Left", "hityper": "any", "type4py": "bool", "test4dt_se": "Either", "test4dt_be": "Either"}}, "Left.is_left": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left", "test4dt_be": "Left"}}, "Left.is_right": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left", "test4dt_be": "Left"}}, "Left.to_maybe": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left", "test4dt_be": "Left"}}, "Left.to_validation": {"self": {"test4dt": "Left", "llm-with-summary": "Left", "llm-only": "Left", "hityper": "any", "type4py": "any", "test4dt_se": "Left", "test4dt_be": "Left"}}, "Right.map": {"self": {"test4dt": "Callable[[Any], Any]", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}, "mapper": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "type", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Right.bind": {"self": {"test4dt": "Right[A]", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}, "mapper": {"test4dt": "Function(A) -> Either[B]", "llm-with-summary": "Callable[[A], Either[B]]", "llm-only": "Callable[[A], Either[B]]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], Either[B]]", "test4dt_be": "Function[A] -> Either[B]"}}, "Right.is_right": {"self": {"test4dt": "Right", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}}, "Right.is_left": {"self": {"test4dt": "Right", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}}, "Right.to_maybe": {"self": {"test4dt": "Right", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}}, "Right.to_validation": {"self": {"test4dt": "Right", "llm-with-summary": "Right", "llm-only": "Right", "hityper": "any", "type4py": "any", "test4dt_se": "Right", "test4dt_be": "Right"}}}, "pymonet.immutable_list": {"ImmutableList.__init__": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "head": {"test4dt": "Any", "llm-with-summary": "Optional[Any]", "llm-only": "Any", "hityper": "None", "type4py": "bool", "test4dt_se": "Optional[Any]", "test4dt_be": "Any"}, "tail": {"test4dt": "Union[ImmutableList, None]", "llm-with-summary": "Union[ImmutableList, None]", "llm-only": "Union[ImmutableList, None]", "hityper": "None", "type4py": "str", "test4dt_se": "Union[ImmutableList, None]", "test4dt_be": "Union[ImmutableList, None]"}, "is_empty": {"test4dt": "bool", "llm-with-summary": "bool", "llm-only": "bool", "hityper": "bool", "type4py": "bool", "test4dt_se": "bool", "test4dt_be": "bool"}}, "ImmutableList.__eq__": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "other": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "Iterable[T]", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}}, "ImmutableList.__str__": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}}, "ImmutableList.__add__": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "other": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "Iterable[T]", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}}, "ImmutableList.__len__": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}}, "ImmutableList.of": {"cls": {"test4dt": "Type[ImmutableList]", "llm-with-summary": "Type[ImmutableList]", "llm-only": "Type[ImmutableList]", "hityper": "any", "type4py": "Iterable[str]", "test4dt_se": "Type[ImmutableList]", "test4dt_be": "Type[ImmutableList]"}, "head": {"test4dt": "object", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "T", "test4dt_se": "Any", "test4dt_be": "Any"}}, "ImmutableList.empty": {"cls": {"test4dt": "Type[ImmutableList]", "llm-with-summary": "Type[ImmutableList]", "llm-only": "Type[ImmutableList]", "hityper": "any", "type4py": "Callable[[Any], T]", "test4dt_se": "Type[ImmutableList]", "test4dt_be": "Type[ImmutableList]"}}, "ImmutableList.to_list": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}}, "ImmutableList.append": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "A", "test4dt_be": "ImmutableList"}, "new_element": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "A", "hityper": "any", "type4py": "T", "test4dt_se": "A", "test4dt_be": "Any"}}, "ImmutableList.unshift": {"self": {"test4dt": "Any", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "new_element": {"test4dt": "A", "llm-with-summary": "A", "llm-only": "Any", "hityper": "any", "type4py": "T", "test4dt_se": "Any", "test4dt_be": "A"}}, "ImmutableList.map": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "fn": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "ImmutableList.filter": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "fn": {"test4dt": "Callable[[Any], bool]", "llm-with-summary": "Callable[[A], bool]", "llm-only": "Callable[[Any], bool]", "hityper": "any", "type4py": "Callable[..., T]", "test4dt_se": "Callable[[A], bool]", "test4dt_be": "Callable[[A], bool]"}}, "ImmutableList.find": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "fn": {"test4dt": "Callable[[A], bool]", "llm-with-summary": "Callable[[A], bool]", "llm-only": "Callable[[Any], bool]", "hityper": "any", "type4py": "Callable[..., T]", "test4dt_se": "Callable[[A], bool]", "test4dt_be": "Callable[[A], bool]"}}, "ImmutableList.reduce": {"self": {"test4dt": "ImmutableList", "llm-with-summary": "ImmutableList", "llm-only": "ImmutableList", "hityper": "any", "type4py": "any", "test4dt_se": "ImmutableList", "test4dt_be": "ImmutableList"}, "fn": {"test4dt": "Callable[[A, B], A]", "llm-with-summary": "Callable[[A, B], A]", "llm-only": "Callable[[Any, Any], Any]", "hityper": "any", "type4py": "int", "test4dt_se": "Callable[[Any, Any], Any]", "test4dt_be": "Callable[[Any, Any], Any]"}, "acc": {"test4dt": "Any", "llm-with-summary": "A", "llm-only": "A", "hityper": "any", "type4py": "int", "test4dt_se": "Any", "test4dt_be": "A"}}}, "pymonet.lazy": {"Lazy.__init__": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}, "constructor_fn": {"test4dt": "Callable[[], Any]", "llm-with-summary": "Callable[[], A]", "llm-only": "Callable[[], A]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[], Any]", "test4dt_be": "Callable[[], Any]"}}, "Lazy.__str__": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.__eq__": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}, "other": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.of": {"cls": {"test4dt": "Type[Lazy]", "llm-with-summary": "Type[Lazy]", "llm-only": "Type[Lazy]", "hityper": "any", "type4py": "int", "test4dt_se": "Type[Lazy]", "test4dt_be": "Type[Lazy]"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "Sequence[Any]", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Lazy._compute_value": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.map": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}, "mapper": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "any", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Lazy.ap": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}, "applicative": {"test4dt": "Lazy[Callable[[A], B]]", "llm-with-summary": "Lazy[Function(A) -> B]", "llm-only": "Lazy[Function(A) -> B]", "hityper": "any", "type4py": "str", "test4dt_se": "Lazy[Callable[[A], B]]", "test4dt_be": "Lazy[Callable[[A], B]]"}}, "Lazy.bind": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}, "fn": {"test4dt": "Function[[Any], Lazy]", "llm-with-summary": "Callable[[A], Lazy[B]]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable[[], None]", "test4dt_se": "Function[A, Lazy[B]]", "test4dt_be": "Callable[[A], Lazy[B]]"}}, "Lazy.get": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.to_box": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.to_either": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.to_maybe": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.to_try": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "Lazy.to_validation": {"self": {"test4dt": "Lazy", "llm-with-summary": "Lazy", "llm-only": "Lazy", "hityper": "any", "type4py": "any", "test4dt_se": "Lazy", "test4dt_be": "Lazy"}}, "lambda_fn": {}}, "pymonet.maybe": {"Maybe.__init__": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Union[Any, None]", "test4dt_be": "Any"}, "is_nothing": {"test4dt": "bool", "llm-with-summary": "bool", "llm-only": "bool", "hityper": "any", "type4py": "bool", "test4dt_se": "bool", "test4dt_be": "bool"}}, "Maybe.__eq__": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}, "other": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "Iterable[T]", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}, "Maybe.just": {"cls": {"test4dt": "Type[Maybe]", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "T", "test4dt_se": "Type[Maybe]", "test4dt_be": "Type[Maybe]"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "bool", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Maybe.nothing": {"cls": {"test4dt": "Type[Maybe]", "llm-with-summary": "Type[Maybe]", "llm-only": "Type[Maybe]", "hityper": "any", "type4py": "Type[object]", "test4dt_se": "Type[Maybe]", "test4dt_be": "Type[Maybe]"}}, "Maybe.map": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}, "mapper": {"test4dt": "Function[A, B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[Any], Any]", "hityper": "any", "type4py": "Union[Callable, None]", "test4dt_se": "Callable[[Any], Any]", "test4dt_be": "Function(A) -> B"}}, "Maybe.bind": {"self": {"test4dt": "Function[A] -> Maybe[B]", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}, "mapper": {"test4dt": "Function[[A], Maybe[B]]", "llm-with-summary": "Callable[[A], Maybe[B]]", "llm-only": "Callable[[A], Maybe[B]]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Function(A) -> Maybe[B]", "test4dt_be": "Function(A) -> Maybe[B]"}}, "Maybe.ap": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe[B]", "test4dt_be": "Maybe"}, "applicative": {"test4dt": "Maybe[B]", "llm-with-summary": "Maybe[B]", "llm-only": "Maybe[B]", "hityper": "any", "type4py": "str", "test4dt_se": "Maybe[B]", "test4dt_be": "Maybe[B]"}}, "Maybe.filter": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe[A]", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Function[[Any], bool]", "test4dt_be": "Maybe"}, "filterer": {"test4dt": "Function[A] -> Boolean", "llm-with-summary": "Callable[[A], bool]", "llm-only": "Callable[[A], bool]", "hityper": "any", "type4py": "str", "test4dt_se": "Callable[[Any], bool]", "test4dt_be": "Callable[[Any], bool]"}}, "Maybe.get_or_else": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Any", "test4dt_be": "Maybe"}, "default_value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "bool", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Maybe.to_either": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}, "Maybe.to_box": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}, "Maybe.to_lazy": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}, "Maybe.to_try": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}, "Maybe.to_validation": {"self": {"test4dt": "Maybe", "llm-with-summary": "Maybe", "llm-only": "Maybe", "hityper": "any", "type4py": "any", "test4dt_se": "Maybe", "test4dt_be": "Maybe"}}}, "pymonet.monad_try": {"Try.__init__": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}, "value": {"test4dt": "Union[Any, BaseException]", "llm-with-summary": "object", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Union[Any, BaseException]", "test4dt_be": "Any"}, "is_success": {"test4dt": "bool", "llm-with-summary": "bool", "llm-only": "bool", "hityper": "any", "type4py": "bool", "test4dt_se": "bool", "test4dt_be": "bool"}}, "Try.__eq__": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}, "other": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "T", "test4dt_se": "Try", "test4dt_be": "Try"}}, "Try.__str__": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}}, "Try.of": {"cls": {"test4dt": "Type[Try]", "llm-with-summary": "Type[Try]", "llm-only": "Type[Try]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Type[Try]", "test4dt_be": "Type[Try]"}, "fn": {"test4dt": "Callable[..., A]", "llm-with-summary": "Callable[..., A]", "llm-only": "Callable[..., A]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[..., Any]", "test4dt_be": "Callable[..., Any]"}}, "Try.map": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}, "mapper": {"test4dt": "Callable[[A], B]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "property", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Function(A) -> B"}}, "Try.bind": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}, "binder": {"test4dt": "Callable[[Any], Try]", "llm-with-summary": "Callable[[A], Try[B]]", "llm-only": "Callable[[A], Try[B]]", "hityper": "any", "type4py": "list", "test4dt_se": "Function(A) -> Try[B]", "test4dt_be": "Function(A) -> Try[B]"}}, "Try.on_success": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try[A]", "test4dt_be": "Try"}, "success_callback": {"test4dt": "Callable[[A], None]", "llm-with-summary": "Callable[[A], None]", "llm-only": "Callable[[A], None]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], None]", "test4dt_be": "Callable[[A], None]"}}, "Try.on_fail": {"self": {"test4dt": "Try[A]", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try[A]", "test4dt_be": "Try"}, "fail_callback": {"test4dt": "Callable[[A], Any]", "llm-with-summary": "Callable[[Any], Any]", "llm-only": "Callable[[Any], None]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], None]", "test4dt_be": "Callable[[A], None]"}}, "Try.filter": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}, "filterer": {"test4dt": "Callable[[A], bool]", "llm-with-summary": "Callable[[A], bool]", "llm-only": "Callable[[Any], bool]", "hityper": "any", "type4py": "any", "test4dt_se": "Callable[[A], bool]", "test4dt_be": "Callable[[A], bool]"}}, "Try.get": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "Try", "test4dt_be": "Try"}}, "Try.get_or_else": {"self": {"test4dt": "Try", "llm-with-summary": "Try", "llm-only": "Try", "hityper": "any", "type4py": "any", "test4dt_se": "B", "test4dt_be": "Try"}, "default_value": {"test4dt": "Any", "llm-with-summary": "B", "llm-only": "Any", "hityper": "any", "type4py": "bool", "test4dt_se": "Any", "test4dt_be": "B"}}}, "pymonet.semigroups": {"Semigroup.__init__": {"self": {"test4dt": "Semigroup", "llm-with-summary": "Semigroup", "llm-only": "Semigroup", "hityper": "any", "type4py": "any", "test4dt_se": "Semigroup", "test4dt_be": "Semigroup"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "typing.Any", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Semigroup.__eq__": {"self": {"test4dt": "Semigroup", "llm-with-summary": "Semigroup", "llm-only": "Semigroup", "hityper": "any", "type4py": "any", "test4dt_se": "Semigroup", "test4dt_be": "Semigroup"}, "other": {"test4dt": "Semigroup", "llm-with-summary": "Semigroup", "llm-only": "Semigroup", "hityper": "any", "type4py": "AbstractSet[T]", "test4dt_se": "Semigroup", "test4dt_be": "Semigroup"}}, "Semigroup.fold": {"self": {"test4dt": "Semigroup", "llm-with-summary": "Semigroup", "llm-only": "Semigroup", "hityper": "any", "type4py": "any", "test4dt_se": "Semigroup", "test4dt_be": "Semigroup"}, "fn": {"test4dt": "Callable[[Any], Any]", "llm-with-summary": "Callable[[T], R]", "llm-only": "Callable[[T], R]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[Any], Any]", "test4dt_be": "Callable[[Any], Any]"}}, "Semigroup.neutral": {"cls": {"test4dt": "Type[Semigroup]", "llm-with-summary": "Type[Semigroup]", "llm-only": "Type[Semigroup]", "hityper": "any", "type4py": "Type[object]", "test4dt_se": "Type[Semigroup]", "test4dt_be": "Type[Semigroup]"}}, "Sum.__str__": {"self": {"test4dt": "Sum", "llm-with-summary": "Sum", "llm-only": "Sum", "hityper": "any", "type4py": "any", "test4dt_se": "Sum", "test4dt_be": "Sum"}}, "Sum.concat": {"self": {"test4dt": "Sum", "llm-with-summary": "Sum", "llm-only": "Sum", "hityper": "any", "type4py": "any", "test4dt_se": "Sum", "test4dt_be": "Sum"}, "semigroup": {"test4dt": "Sum", "llm-with-summary": "Sum[B]", "llm-only": "Sum[B]", "hityper": "any", "type4py": "int", "test4dt_se": "Sum[B]", "test4dt_be": "Sum"}}, "All.__str__": {"self": {"test4dt": "All", "llm-with-summary": "All", "llm-only": "All", "hityper": "any", "type4py": "any", "test4dt_se": "All", "test4dt_be": "All"}}, "All.concat": {"self": {"test4dt": "All[B]", "llm-with-summary": "All", "llm-only": "All", "hityper": "any", "type4py": "any", "test4dt_se": "All", "test4dt_be": "All"}, "semigroup": {"test4dt": "All[B]", "llm-with-summary": "All[B]", "llm-only": "All", "hityper": "any", "type4py": "int", "test4dt_se": "All[B]", "test4dt_be": "All[B]"}}, "One.__str__": {"self": {"test4dt": "One", "llm-with-summary": "One", "llm-only": "One", "hityper": "any", "type4py": "any", "test4dt_se": "One", "test4dt_be": "One"}}, "One.concat": {"self": {"test4dt": "One[A]", "llm-with-summary": "One", "llm-only": "One", "hityper": "any", "type4py": "any", "test4dt_se": "One[A]", "test4dt_be": "One[B]"}, "semigroup": {"test4dt": "One[B]", "llm-with-summary": "One[B]", "llm-only": "One[B]", "hityper": "any", "type4py": "int", "test4dt_se": "One[B]", "test4dt_be": "One[B]"}}, "First.__str__": {"self": {"test4dt": "First", "llm-with-summary": "First", "llm-only": "First", "hityper": "any", "type4py": "any", "test4dt_se": "First", "test4dt_be": "First"}}, "First.concat": {"self": {"test4dt": "First", "llm-with-summary": "First", "llm-only": "First[B]", "hityper": "any", "type4py": "any", "test4dt_se": "First", "test4dt_be": "First"}, "semigroup": {"test4dt": "First", "llm-with-summary": "First[B]", "llm-only": "First[B]", "hityper": "any", "type4py": "str", "test4dt_se": "First[B]", "test4dt_be": "First[B]"}}, "Last.__str__": {"self": {"test4dt": "Last", "llm-with-summary": "Last", "llm-only": "Last", "hityper": "any", "type4py": "any", "test4dt_se": "Last", "test4dt_be": "Last"}}, "Last.concat": {"self": {"test4dt": "Last[B]", "llm-with-summary": "Last", "llm-only": "Last", "hityper": "any", "type4py": "any", "test4dt_se": "Last", "test4dt_be": "Last"}, "semigroup": {"test4dt": "Last[B]", "llm-with-summary": "Last[B]", "llm-only": "Last[B]", "hityper": "any", "type4py": "int", "test4dt_se": "Last[B]", "test4dt_be": "Last[B]"}}, "Map.__str__": {"self": {"test4dt": "Map", "llm-with-summary": "Map", "llm-only": "Map", "hityper": "any", "type4py": "any", "test4dt_se": "Map", "test4dt_be": "Map"}}, "Map.concat": {"self": {"test4dt": "Map[B]", "llm-with-summary": "Map", "llm-only": "Map", "hityper": "any", "type4py": "any", "test4dt_se": "Map", "test4dt_be": "Map"}, "semigroup": {"test4dt": "Map[B]", "llm-with-summary": "Map[B]", "llm-only": "Map[B]", "hityper": "any", "type4py": "dict", "test4dt_se": "Map", "test4dt_be": "Map[B]"}}, "Max.__str__": {"self": {"test4dt": "Max", "llm-with-summary": "Max", "llm-only": "Max", "hityper": "any", "type4py": "any", "test4dt_se": "Max", "test4dt_be": "Max"}}, "Max.concat": {"self": {"test4dt": "Max[B]", "llm-with-summary": "Max", "llm-only": "Max", "hityper": "any", "type4py": "any", "test4dt_se": "Max", "test4dt_be": "Max"}, "semigroup": {"test4dt": "Max[B]", "llm-with-summary": "Max[B]", "llm-only": "Max", "hityper": "any", "type4py": "int", "test4dt_se": "Max", "test4dt_be": "Max[B]"}}, "Min.__str__": {"self": {"test4dt": "Min", "llm-with-summary": "Min", "llm-only": "Min", "hityper": "any", "type4py": "any", "test4dt_se": "Min", "test4dt_be": "Min"}}, "Min.concat": {"self": {"test4dt": "Min", "llm-with-summary": "Min", "llm-only": "Min", "hityper": "any", "type4py": "any", "test4dt_se": "Min", "test4dt_be": "Min"}, "semigroup": {"test4dt": "Min", "llm-with-summary": "Min[B]", "llm-only": "Min", "hityper": "any", "type4py": "List[int]", "test4dt_se": "Min", "test4dt_be": "Min"}}}, "pymonet.task": {"Task.__init__": {"self": {"test4dt": "Task", "llm-with-summary": "Task", "llm-only": "Task", "hityper": "any", "type4py": "any", "test4dt_se": "Task", "test4dt_be": "Task"}, "fork": {"test4dt": "Callable[[Any, Any], Any]", "llm-with-summary": "Callable[[Any, Any], Any]", "llm-only": "Callable[[Any, Any], Any]", "hityper": "any", "type4py": "Optional[str]", "test4dt_se": "Callable[[Any, Any], Any]", "test4dt_be": "Function(reject, resolve) -> Any"}}, "Task.of": {"cls": {"test4dt": "Type[Task]", "llm-with-summary": "Type[Task]", "llm-only": "Type[Task]", "hityper": "any", "type4py": "int", "test4dt_se": "Type[Task]", "test4dt_be": "Type[Task]"}, "value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Task.reject": {"cls": {"test4dt": "Type[Task]", "llm-with-summary": "Type[Task]", "llm-only": "Type[Task]", "hityper": "any", "type4py": "T", "test4dt_se": "Type[Task]", "test4dt_be": "Type[Task]"}, "value": {"test4dt": "A", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "A", "test4dt_be": "Any"}}, "Task.map": {"self": {"test4dt": "Task", "llm-with-summary": "Task", "llm-only": "Task", "hityper": "any", "type4py": "any", "test4dt_se": "Task", "test4dt_be": "Task"}, "fn": {"test4dt": "Callable[[Any], B]", "llm-with-summary": "Callable[[Any], Any]", "llm-only": "Callable[[Any], B]", "hityper": "any", "type4py": "Callable[[], None]", "test4dt_se": "Callable[[Any], Any]", "test4dt_be": "Callable[[Any], B]"}}, "Task.bind": {"self": {"test4dt": "Task", "llm-with-summary": "Task", "llm-only": "Task", "hityper": "any", "type4py": "any", "test4dt_se": "Task", "test4dt_be": "Task"}, "fn": {"test4dt": "Callable[[Any], Task]", "llm-with-summary": "Function[Any, Task]", "llm-only": "Callable[[Any], Task]", "hityper": "any", "type4py": "Callable[[], None]", "test4dt_se": "Callable[[Any], Task]", "test4dt_be": "Function(value) -> Task[reject, mapped_value]"}}, "result": {"reject": {"test4dt": "Callable[[Any], Any]", "llm-with-summary": "Callable[[Any], None]", "llm-only": "Callable[[Any], None]", "hityper": "any", "type4py": "any", "test4dt_se": "Callable[[T], None]", "test4dt_be": "Callable[[Any], Any]"}, "resolve": {"test4dt": "Callable[[Any], None]", "llm-with-summary": "Callable[[Any], None]", "llm-only": "Callable[[T], Any]", "hityper": "any", "type4py": "any", "test4dt_se": "Callable[[Any], None]", "test4dt_be": "Callable[[Any], Any]"}}}, "pymonet.utils": {"curry": {"x": {"test4dt": "Callable[..., Any]", "llm-with-summary": "Callable", "llm-only": "Callable[..., Any]", "hityper": "any", "type4py": "int", "test4dt_se": "Callable", "test4dt_be": "Callable"}, "args_count": {"test4dt": "int", "llm-with-summary": "Optional[int]", "llm-only": "int", "hityper": "any", "type4py": "int", "test4dt_se": "int", "test4dt_be": "int"}}, "identity": {"value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "Tuple['T']", "test4dt_se": "Any", "test4dt_be": "Any"}}, "increase": {"value": {"test4dt": "int", "llm-with-summary": "int", "llm-only": "int", "hityper": "any", "type4py": "int", "test4dt_se": "int", "test4dt_be": "int"}}, "eq": {"value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}, "value1": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "curried_map": {"mapper": {"test4dt": "Callable[[Any], Any]", "llm-with-summary": "Callable[[T], U]", "llm-only": "Callable[[Any], Any]", "hityper": "any", "type4py": "Dict[str, Any]", "test4dt_se": "Callable[[Any], Any]", "test4dt_be": "Callable[[Any], Any]"}, "collection": {"test4dt": "List[Any]", "llm-with-summary": "Iterable", "llm-only": "list", "hityper": "any", "type4py": "Dict[str, Any]", "test4dt_se": "Iterable", "test4dt_be": "list"}}, "curried_filter": {"filterer": {"test4dt": "Callable[[Any], bool]", "llm-with-summary": "Callable[[T], bool]", "llm-only": "Callable[[Any], bool]", "hityper": "any", "type4py": "List[Dict[str, Any]]", "test4dt_se": "Callable[[T], bool]", "test4dt_be": "Callable[[Any], bool]"}, "collection": {"test4dt": "Iterable[T]", "llm-with-summary": "Iterable", "llm-only": "Union[list, tuple, set, dict]", "hityper": "any", "type4py": "List[Dict[str, Any]]", "test4dt_se": "Iterable", "test4dt_be": "Iterable[Any]"}}, "find": {"collection": {"test4dt": "List[A]", "llm-with-summary": "List[A]", "llm-only": "List[A]", "hityper": "any", "type4py": "List[T]", "test4dt_se": "List[A]", "test4dt_be": "List[A]"}, "key": {"test4dt": "Function[A, Boolean]", "llm-with-summary": "Callable[[A], bool]", "llm-only": "Callable[[A], bool]", "hityper": "any", "type4py": "Callable[[T], bool]", "test4dt_se": "Function[A, Boolean]", "test4dt_be": "Callable[[Any], bool]"}}, "compose": {"value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "int", "test4dt_se": "Any", "test4dt_be": "Any"}}, "pipe": {"value": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "Iterable[Any]", "test4dt_se": "Any", "test4dt_be": "Any"}}, "cond": {"condition_list": {"test4dt": "List[Tuple[Function, Function]]", "llm-with-summary": "List[Tuple[Function, Function]]", "llm-only": "List[Tuple[Callable, Callable]]", "hityper": "any", "type4py": "Container[T]", "test4dt_se": "List[Tuple[Function, Function]]", "test4dt_be": "List[Tuple[Function, Function]]"}}, "memoize": {"fn": {"test4dt": "Callable[[Any], Any]", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[Any], Any]"}, "key": {"test4dt": "Function(A, A) -> Boolean", "llm-with-summary": "Function(A, A) -> Boolean", "llm-only": "Callable[[Any, Any], bool]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Function(A, A) -> Boolean", "test4dt_be": "Function(A, A) -> Boolean"}}, "fn": {}, "result": {}, "memoized_fn": {"argument": {"test4dt": "Any", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "dict", "test4dt_se": "Any", "test4dt_be": "Any"}}}, "pymonet.validation": {"Validation.__init__": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}, "value": {"test4dt": "Union[Any, None]", "llm-with-summary": "Any", "llm-only": "Any", "hityper": "any", "type4py": "Optional[Any]", "test4dt_se": "Union[Any, None]", "test4dt_be": "Any"}, "errors": {"test4dt": "List[str]", "llm-with-summary": "List[str]", "llm-only": "Union[list, dict, str]", "hityper": "any", "type4py": "Exception", "test4dt_se": "List[str]", "test4dt_be": "List[str]"}}, "Validation.__eq__": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}, "other": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "Type", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.__str__": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.success": {"cls": {"test4dt": "Type[Validation]", "llm-with-summary": "Type[Validation]", "llm-only": "Type[Validation]", "hityper": "any", "type4py": "int", "test4dt_se": "Type[Validation]", "test4dt_be": "Type[Validation]"}, "value": {"test4dt": "Any", "llm-with-summary": "Union[Any, None]", "llm-only": "Optional[Any]", "hityper": "None", "type4py": "str", "test4dt_se": "Any", "test4dt_be": "Any"}}, "Validation.fail": {"cls": {"test4dt": "Type[Validation]", "llm-with-summary": "Type[Validation]", "llm-only": "Type[Validation]", "hityper": "any", "type4py": "BaseException", "test4dt_se": "Type[Validation]", "test4dt_be": "Type[Validation]"}, "errors": {"test4dt": "List[E]", "llm-with-summary": "List[E]", "llm-only": "List[Any]", "hityper": "list", "type4py": "Optional[float]", "test4dt_se": "List[E]", "test4dt_be": "List[E]"}}, "Validation.is_success": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.is_fail": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.map": {"self": {"test4dt": "Validation[A, List[E]]", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}, "mapper": {"test4dt": "Function(A) -> B", "llm-with-summary": "Callable[[A], B]", "llm-only": "Callable[[A], B]", "hityper": "any", "type4py": "Callable[..., T]", "test4dt_se": "Callable[[A], B]", "test4dt_be": "Callable[[A], B]"}}, "Validation.bind": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}, "folder": {"test4dt": "Function(A) -> Validation[B, E]", "llm-with-summary": "Callable[[A], Validation[B, E]]", "llm-only": "Callable[[A], Validation[B, E]]", "hityper": "any", "type4py": "str", "test4dt_se": "Callable[[Any], Validation]", "test4dt_be": "Function(A) -> Validation[B, E]"}}, "Validation.ap": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation[Any, List[E]]", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}, "fn": {"test4dt": "Callable[[Any], Validation[Any, List[E]]]", "llm-with-summary": "Callable[[A], Validation[Any, List[E]]]", "llm-only": "Callable[[Any], Validation[Any, List[E]]]", "hityper": "any", "type4py": "Callable", "test4dt_se": "Callable[[Any], Validation[Any, List[Any]]]", "test4dt_be": "Function(A) -> Validation[Any, List[E]]"}}, "Validation.to_either": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.to_maybe": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.to_box": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.to_lazy": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}, "Validation.to_try": {"self": {"test4dt": "Validation", "llm-with-summary": "Validation", "llm-only": "Validation", "hityper": "any", "type4py": "any", "test4dt_se": "Validation", "test4dt_be": "Validation"}}}, "pymonet": {}}}